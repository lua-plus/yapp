local unpack = require("src.table.unpack")
local support = require("src.term.chalk.util.support")
local round = require("src.math.round")

local colors = {}

colors.transform = {}

local min = math.min

---@param hex_str string
function colors.transform.hex_to_rgb(hex_str)
    assert(type(hex_str) == "string", "Expected a string")
    -- TODO match even better
    assert(hex_str:match("^#?[0-9a-fA-F]+"), "Expected a hex code string")

    -- remove # if it exists
    if hex_str:sub(1, 1) == "#" then
        hex_str = hex_str:sub(2)
    end

    -- "A" -> "A0"
    if #hex_str == 1 then
        hex_str = hex_str .. "0"
    end

    -- "A7" -> "A7A7A7"
    if #hex_str == 2 then
        hex_str = string.rep(hex_str, 3)
    end

    -- "ABC" -> "A0B0C0"
    if #hex_str == 3 then
        hex_str = hex_str:gsub("(.)", "%10")
    end

    -- VScode's color picker has an alpha channel for some reason.
    if #hex_str == 8 then
        hex_str = hex_str:sub(3)
    end

    assert(#hex_str == 6, "Expected a hex code of length 1, 2, 3, or 6.")

    local channels = {}
    local i = 1
    for segment in hex_str:gmatch("..") do
        local parsed = tonumber(segment, 16)
        if not parsed then
            error(string.format(
                "Could not parse %q as a hexadecimal number", segment
            ))
        end
        channels[i] = parsed

        i = i + 1
    end

    return channels
end

--- Ported from https://github.com/chalk/chalk/blob/main/source/vendor/ansi-styles/index.js
---@param red integer
---@param green integer
---@param blue integer
function colors.transform.rgb_to_ansi256(red, green, blue)
    if red == green and green == blue then
        if red < 8 then
            return 16
        end

        if red > 248 then
            return 231
        end

        return round(((red - 8) / 247) * 24) + 232;
    end

    return 16
        + (36 * round(red / 255 * 5))
        + (6 * round(green / 255 * 5))
        + round(blue / 255 * 5)
end

--- Ported from https://github.com/chalk/chalk/blob/main/source/vendor/ansi-styles/index.js
---@param code integer
function colors.transform.ansi256_to_ansi(code)
    if code < 8 then
        return 30 + code
    end

    if code < 16 then
        return 90 + code - 8
    end

    local red, green, blue

    if code >= 232 then
        red = (((code - 232) * 10) + 8) / 255;
        green = red;
        blue = red;
    else
        code = code - 16

        local remainder = code % 36

        red = math.floor(code / 36) / 5
        green = math.floor(remainder / 6) / 5
        blue = (remainder % 6) / 5
    end

    local value = math.max(red, green, blue) * 2
    if value == 0 then
        return 30
    end

    -- TODO luaJIT support
    local result = 30 + ((round(blue) << 2) | (round(green) << 1) | round(red))

    if value == 2 then
        result = result + 60
    end

    return result
end

---@param style Yapp.Chalk.Style
---@param level Yapp.Chalk.SupportLevel
---@return Yapp.Chalk.Style
function colors.transform.transform(style, level)
    local code_in, code_out, wanted_level = unpack(style)

    if wanted_level == level then
        return style
    end

    if level == support.level.ANSI_16m then
        return style
    end

    if wanted_level == support.level.ANSI_16m then
        local rgb = code_in --[[ @as [integer, integer, integer] ]]
        code_in = colors.transform.rgb_to_ansi256(unpack(rgb))
    end

    if level == support.level.ANSI_256 then
        return { code_in, code_out, min(level, wanted_level) }
    end

    if wanted_level == support.level.ANSI_256 then
        code_in = colors.transform.ansi256_to_ansi(code_in --[[ @as integer ]])
    end

    if level == support.level.ANSI then
        return { code_in, code_out, min(level, wanted_level) }
    end

    return { 0, 0, support.level.NONE }
end

-- Generated by sh/chalk/rip_styles.js
colors.styles = {
    modifier = {
        reset = { 0, 0 },
        bold = { 1, 22 },
        dim = { 2, 22 },
        italic = { 3, 23 },
        underline = { 4, 24 },
        overline = { 53, 55 },
        inverse = { 7, 27 },
        hidden = { 8, 28 },
        strikethrough = { 9, 29 },
    },
    color = {
        black = { 30, 39 },
        red = { 31, 39 },
        green = { 32, 39 },
        yellow = { 33, 39 },
        blue = { 34, 39 },
        magenta = { 35, 39 },
        cyan = { 36, 39 },
        white = { 37, 39 },
        blackBright = { 90, 39 },
        gray = { 90, 39 },
        grey = { 90, 39 },
        redBright = { 91, 39 },
        greenBright = { 92, 39 },
        yellowBright = { 93, 39 },
        blueBright = { 94, 39 },
        magentaBright = { 95, 39 },
        cyanBright = { 96, 39 },
        whiteBright = { 97, 39 },
    },
    bgColor = {
        bgBlack = { 40, 49 },
        bgRed = { 41, 49 },
        bgGreen = { 42, 49 },
        bgYellow = { 43, 49 },
        bgBlue = { 44, 49 },
        bgMagenta = { 45, 49 },
        bgCyan = { 46, 49 },
        bgWhite = { 47, 49 },
        bgBlackBright = { 100, 49 },
        bgGray = { 100, 49 },
        bgGrey = { 100, 49 },
        bgRedBright = { 101, 49 },
        bgGreenBright = { 102, 49 },
        bgYellowBright = { 103, 49 },
        bgBlueBright = { 104, 49 },
        bgMagentaBright = { 105, 49 },
        bgCyanBright = { 106, 49 },
        bgWhiteBright = { 107, 49 },
    },
}

-- now we chuck them all into one bucket
---@type table<string, Yapp.Chalk.Style>
colors.styles.all = (function()
    local all = {}

    for _, group in pairs(colors.styles) do
        for name, style in pairs(group) do
            all[name] = style
        end
    end

    return all
end)()

---@alias Yapp.Chalk.Style [ integer|[integer, integer, integer], integer, Yapp.Chalk.SupportLevel ]

---@param name string
---@return Yapp.Chalk.Style?
function colors.get_style_by_name(name)
    local named_style = colors.styles.all[name]
    if named_style then
        return { named_style[1], named_style[2], support.level.ANSI }
    end
end

local ANSI_FG_RESET = 39

local function format_ansi(code)
    return string.format("\27[%dm", code)
end

colors.format = {}

---@param style Yapp.Chalk.Style
---@return [string, string]
function colors.format.ansi(style)
    local s_in = format_ansi(style[1])
    local s_out = format_ansi(style[2])
    return { s_in, s_out }
end

---@param style Yapp.Chalk.Style
---@return [string, string]
function colors.format.ansi256(style)
    local c_in, c_out = unpack(style)

    local is_fg = c_out == ANSI_FG_RESET
    local fg_bg_in = is_fg and 38 or 48

    local ansi256 = string.format("\27[%d;5;%dm", fg_bg_in, c_in)

    return { ansi256, format_ansi(c_out) }
end

---@param style Yapp.Chalk.Style
---@return [string, string]
function colors.format.ansi16m(style)
    local c_in, c_out = unpack(style)

    local is_fg = c_out == ANSI_FG_RESET
    local fg_bg_in = is_fg and 38 or 48

    local r, g, b = unpack(c_in --[[ @as [integer, integer, integer] ]])
    r, g, b = round(r), round(g), round(b)

    local rgb = string.format("\27[%d;2;%d;%d;%dm", fg_bg_in, r, g, b)

    return { rgb, format_ansi(c_out) }
end

---@param level Yapp.Chalk.SupportLevel
---@param style Yapp.Chalk.Style
---@return [string, string]
function colors.wrap_for_level(level, style)
    local style = colors.transform.transform(style, level)
    local level = style[3]

    if level == support.level.ANSI_16m then
        return colors.format.ansi16m(style)
    end

    if level == support.level.ANSI_256 then
        return colors.format.ansi256(style)
    end

    if level == support.level.ANSI then
        return colors.format.ansi(style)
    end

    return { "", "" }
end

return colors
